1. Задание 1
1.1. Найдите информацию о том, как в Ubuntu открыть порт 80,443. Укажите как.
Т.к. изначально в дистрибутиве Ubuntu работает политика ACCEPT, то все порты открыты по умолчанию.
Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Чтобы это исправить сначала добавляем необходимые правила для локальных соединений:
sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A OUTPUT -o lo -j ACCEPT
А так же правило для уже установленных соединениий:
sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

Затем добавляем правила по портам, которые нам необходимы.
Для SSH:
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
Для http:
sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
Для https:
sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT

И переключаем политику на DROP:
sudo iptables -P INPUT DROP
Теперь неразрешенные соединения будут отброшены.

1.2. Установить nginx, сконфигурировать свой виртуальный хост, используя порт 80, так, чтобы:
на запрос клиента с указанным и непустым хидером 'User'. отправлять код 200 с текстом "Hi $user!", где $user - это значение хидера 'User'.
иначе отправлять код 404 с текстом "Page not found".
1.3. Прислать конфиг nginx и команду curl, которую выполняете.

Устанавливаем последнюю версию nginx добавив персональный архив пакетов:
sudo apt-add-repository ppa:nginx/stable
Обновляем список пакетов из репозиториев и устанавливаем
sudo apt update
sudo apt install nginx

Создаем конфигурационный файл:
sudo vim /etc/nginx/conf.d/mysite/conf

Содержимое файла:
server{
        listen 80;
        server_name mysite;

        location / {
        if ($http_name != '') {
                return 200 "Hi $http_name";
        }
        return 404 "Not found";
        }
}

После записи файла проверяем синтаксис
sudo nginx -t

И перезапускаем сервер
sudo service nginx reload

Выполняем запрос curl
curl -D - http://localhost -H "Host: mysite" -H "name: Sobol"

Ответ:
HTTP/1.1 200 OK
Server: nginx/1.16.1
Date: Sun, 19 Apr 2020 23:18:47 GMT
Content-Type: application/octet-stream
Content-Length: 11
Connection: keep-alive

Hi Sobol


При запросе curl -D - http://localhost -H "Host: mysite" -H "name: "
Ответ:
HTTP/1.1 404 Not Found
Server: nginx/1.16.1
Date: Sun, 19 Apr 2020 23:19:35 GMT
Content-Type: application/octet-stream
Content-Length: 9
Connection: keep-alive

Not found

2. Задание 2

2.1. Найти информацию о том, что такое самоподписанные сертификаты и сгенерировать такой для своего вэб сервера. Написать своими словами, что это такое и как сгенерить.

SSL сертификат необходим для установления защищенного шифрованного соединения между сервером и клиентом.
Самоподписанные сертификаты SSL создаются в основном для внутреннего использования, т.к. будут давать ошибку, что сертификат не является доверенным.
Для создания закрытого ключа и сертификата необходимо воспользоваться утилитой openssl
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt

При запросе заполнить информацию о сертификате вводим следующее:

Country Name (2 letter code) [AU]:RU
State or Province Name (full name) [Some-State]:St.Petersburg
Locality Name (eg, city) []:St.Petersburg
Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySite
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:ubuntu
Email Address []:

2. Добавить SSL соединение для дифолтного виртуального хоста nginx, используя порт 443. Прикрепить конфиги nginx.

Создаем сниппет, который указывает на закрытый ключ и сертификат, который мы создали.
sudo vim /etc/nginx/snippets/self-signed.conf

Содержимое self-signed.conf
ssl_certificate /etc/ssl/certs/ubuntu-selfsigned.crt;
ssl_certificate_key /etc/ssl/private/ubuntu-selfsigned.key;

Затем переходим в настройки конфигурации default. Раскомментируем строки с указанием прослушки портов 443 и укажем использование сниппета  self-signed.conf
sudo vim /etc/nginx/sites-available/default

Содержимое default:

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
         listen 443 ssl default_server;
         listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;
        include snippets/self-signed.conf;
        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}

Затем проверяем созданную конфигурацию
sudo nginx -t
и перезапускаем сервис
sudo service nginx restart

3. Откройте в браузере страницу хоста и посмотрите, как браузер реагирует на самоподписанные сертификаты. Напишите, что видите.

При открытии браузером страницы https с самоподписанным сертификатом получаем предупреждение, что невозможно проверить издателя сертификата и что эта страница не является доверенной. Можем нажать, что понимаем риск и перейти на страницу.

4. Мы говорили о необходимости шифровать симметрично. При этом проблем с получением ассиметричных сертификатов нет. Зачем такая сложная схема для установления SSL соединения? Почему бы не шифровать ассиметрично? Своими словами.

Ассиметричные алгоритмы отличаются меньшей скорость шифрования\дешифрования, поэтому их удобнее использовать в комбинации с симметричным алгоритмом. С помощью ассиметричного шифрования другой стороне передается симметричный ключ, и затем данные шифруются этим ключом в рамках сессии.



